# -*- coding: utf-8 -*-
"""MyCSMidtermClasses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eNNHmagW6U0ky4LfaAc6Z_3HKSqAG5XR
"""

# class
class Employee: 

  # init constructor uses self keyword
  def __init__(self):
   pass 

  # this method takes in certain variables and prints them
  def emp_info(self, name, year, address):
    print("Employee details: ", name, "  ", year, "  ", address)

  # getInfo passes salary and no_hr_wk_pd as parameters
  # and assigns them to self.sal and self.nhwp 
  # so that we can call these variables through all methods within the class
  def getInfo(self, salary, no_hr_wk_pd):
    self.sal = salary
    self.nhwp = no_hr_wk_pd

  # We are calling the self.sal variable and using the if condition
  def AddSal(self):
    if self.sal < 500:
      # the self.sal is assigning itself to it plus 10
      self.sal += 10
    print("Salary:", self.sal)

  # Both variables from getInfo() are called and used here with if condition
  def AddWork(self):
    if self.nhwp > 6:
      self.sal += 5
    print("Salary:", self.sal)

def main(): 
  # user inputs
  name = input("Enter the employee's name: ")
  year = int(input("Enter the employee's year of joining: "))
  address = input("Enter the employee's address: ")
  salary = int(input("Enter the employee's salary: "))
  workhrspday = float(input("Enter the number of hours of work per day: "))
  
  # create the first object and passing the user inputs, which can be entered
  # The one I have entered meets the if conditions
  obj1 = Employee()
  obj1.emp_info(name, year, address)
  obj1.getInfo(salary, workhrspday)
  obj1.AddSal()
  obj1.AddWork()

  # create the second object and I have assigned the input here
  # The parameters don't meet the if conditions
  obj2 = Employee()
  obj2.emp_info("Nolan Burgress", 2005, "35 Franklin Way")
  obj2.getInfo(545, 5)
  obj2.AddSal()
  obj2.AddWork()

# checks for the main method
if __name__ == '__main__': 
  main()

import math
class Shape: # this is the class 

  def __init__(self): # this is the empty initializer
    pass          # pass means nothing happens, and you get no error

  def area(self):     # this is an empty method
    pass

#this is another class. It extends the previous class, which means it inherits elements from the Shape() class
class Triangle(Shape):
  def area(self, len1, len2, ang): # the area method takes in the variables as parameters
    self.l1 = len1        # the variables are initialized through self
    self.l2 = len2
    self.ang = ang
    sine = math.sin(math.radians(self.ang))#sine calculates the radian-based sine value of a function
    area = ((self.l1 * self.l2) * sine)/2 # This is how I calculated the area of a triangle
    print("Area of Triangle:", area) 

# Like the Triangle class, this class extends properties from Shape
class Rectangle(Shape): 

  def area(self, height, width): # the area method takes in 2 variables
    self.h = height # initialize both of them with self
    self.w = width
    area = self.h * self.w    # calculate area using both variables
    print("Area of Rectangle:", area)
    
  def perimeter(self):
    # the varbles for rectangle area method can be used here using self
    perimeter = 2*self.h + 2*self.w #the area is calculated using those 2 variables    
    print("Perimeter of Rectangle:", perimeter)

def main():
  len1 = int(input("Enter the first side length: "))
  len2 = int(input("Enter the second side length: "))
  ang = float(input("Enter the angle measurement between both: "))

  tri = Triangle()          # create objects for both child classes
  tri.area(len1, len2, ang) # call the area methods for each object
  rect = Rectangle()
  rect.area(len1, len2)
  rect.perimeter()     # also, call the perimeter function for the Rectangle class