# -*- coding: utf-8 -*-
"""NumPyMyCsMidterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pvmN3FI5sUQVL6p_a8CXm4Z3OWcovoMt
"""

import numpy as np # import numpy as an abbreviation

class BigMatrixMath: # this is the class

  def __init__(self):  # this is the method/constructor that initializes the program
    self.the_list = [] # the list is declared. initializing it through self helps to use it 
                      # other parts of the class.

  # addMatrix is a method that takes 
  def addMatrix(self, np_arr = np.random.randint(-70,160,(40,40))): 
    
    self.na = np_arr # create self.na, a variable inititialized by self, and set np_arr to that
    self.arr = np.array([[9, 8, 6, 34, 16]])
    for i in self.na:
      self.the_list = np.append(self.na, i) #arr was in place before the_list
    print(self.the_list)
   
  # this method prints the number of dimensions
  def print_dime(self):
    # ndim is a special function in python that returns the number of dimensions of random arrays. Here, it shows the 
    # number of dimensions for the numpy array.
    print("Number of dimensions:", self.na.ndim) 
    print(self.na.shape) 

  def isiteligible(self):
    a = np.array([2,3,1,5,7,5,3])
    d = np.array([[2,3,6,4,3,2,5,8],
                 [4,3,4,5,4,4,4,4]])
    #output = np.dot(a[0,:], d[:,0])
    print(a[0:])
    print(d[:,0])
   # print('output',output)
    #re_arr = np.reshape()
    #print(self.arr[0].shape())
   # a_shape = a[0:]
   # d_shape = d[:,0]
    #if a_shape == d_shape:
    #  print('These two arrays are eligibible for dot product.')
    #  print(np.dot(self.arr[0]. self.arr[1]))
   # else:
    #  print("These two arrays aren't elligible for dot product. Sorry.")
 

       

def main():
  # I have this error, so I cannot
  # NumPy array of size 40 x 40  with all integers between the values of [-70, 159] 
  #ray = np.arange(0, 120).reshape(5, 4, 6)
  arr = []

  matrix = BigMatrixMath()
  matrix.addMatrix()
  matrix.addMatrix()
  matrix.print_dime()
  matrix.isiteligible()

if __name__ == '__main__':
  main()

import numpy as np
# linspace is a special method from numpy which prints specific steps from one number to the other
# in linspace, the fisrt thing entered represents the start value, the second represents
# the end value, the third the number of numbers that need to be evenly spaced in the range of numbers, 
# including the start and stop. dtype can optionally be typed to indicate what data type you're using.
lengthy_array = np.linspace(0.0, 100.0, 25, dtype = np.float64)
print(lengthy_array)

import numpy as np

arr1 = np.array([[56,12],[39,74]]) # this is a 2-dimensional array.
arr2 = np.array([[65,76]]) # this is a 1- dimensional array.
def the_concatenator(arr1, arr2): # this method takes in both arrays
  bigger = np.concatenate((arr1, arr2), axis=0) # 
  print(bigger)       # print the value
the_concatenator(arr1, arr2) # call the method

F = [5,34,6,25,67,12,3,90,58,18,43,27] # this is the array
g = np.reshape(F, (3, 4))  # reshape is a numpy method which takes in the array name as its first parameter,
# and the chosen dimensions as the second parameter. It will shape the array through those dimensions
print(g)