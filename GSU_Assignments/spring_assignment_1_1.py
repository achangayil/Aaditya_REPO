# -*- coding: utf-8 -*-
"""Spring_Assignment_1.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NHbOVcNtD_yzy9a7v1R6LTLAGEMFAwAm
"""

#1. Create a Python script that asks the user for a number and then prints out a list of all
# the divisors of each number less than the asked number.
# Aaditya Changayil
# AChangayil1@student.gsu.edu
# DSCI 1302 PRINC OF PROG FOR DATA SCI II
# January 16, 2022.

class math_operation: # This is the class
  
  # The init method is a pre-defined constructor for use in the class.
  # It takes in the variable num as well as the self keyword.
  # The self keyword is an instance of a class. 
  # It allows us to access methods and variables.
  def __init__(self, num): 

    self.n = num # num is now assigned to the self keyword initialized as a variable.
  
  # This is the method which will be conducting the problem. 
  # The self keyword is inputted rather than parameter variables. This carries all attributes, including variables,
  # to the method. 
  def divisor_finder(self): 
    the_list = [] # A list has been created.

    # self.n is passed through the class as a parameter.
    for x in range(1,self.n): # for each whole number in the range, starting from one to the inputted number - 1, 
      if (self.n % x == 0): # if the remainder of the inputted number is equal to 0, 
        the_list.append(x) # append that number to a list. 
    print("List of divisors less than", self.n, ":", the_list) 

def main(): # This is the main method. It is the execution point for any program in the class. 
  
  num = int(input("Enter a whole, positive number: ")) # num is the input variable. Enter an integer.
  # The object, obj, is created. It is the object for the math_operation class, and num is passed as a parameter.
  obj = math_operation(num) 
  obj.divisor_finder() # call the divisor_finder() method through the object.

# __name__ is a special variable that defines the name of the class from where it's called.
# __main__ represents __name__. __name__ will look for the main code to execute. 
if __name__ == "__main__": 
  main()     # if __name__ == "__main__", the main method will ony directly execute.