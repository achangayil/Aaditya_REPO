# -*- coding: utf-8 -*-
"""CodingLab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e4Wany3gu-bessG_vWimP0u6L0uJ0cst

#Q1#
"""

import matplotlib.pyplot as plt
import numpy as np

# both y1 and y2 represent trig functions going though a loop with lambda
y1=lambda x:2*np.sin(x)   #2sin(x)
y2=lambda x:2*np.cos(x)   #2cos(x)

#first interval
# linspace is a method which creates an evenly spaced sequence in a specific interval
#linspace(start,stop,num) num represents the number of random samples being printed in that specific interval
sin1=np.linspace(-5*np.pi/2,-3*np.pi/2,100) # sin1 represents the increasing part of the sine graph
sin2=np.linspace(-3*np.pi/2,-np.pi/2,100) # sin2 represents the decreasing part of the sine graph
cos1=np.linspace(-3*np.pi,-2*np.pi,100) # cos1 represents the increasing part for the cosine graph
cos2=np.linspace(-2*np.pi,-np.pi,100) # cos2 represents the decreasing part of the cosine graph

#plot on first interval
# plot method plots the graph. takes in the number sequence, the looped trig functions with the sequence passed,
# the letter and symbol key specifying the color and line representation, respectively, and an optional label
# if no line symbol is added, then the line will have a normal line by default, though - can be put for it
plt.plot(sin1,y1(sin1),'r',label='2sin(x)') # plots the increasing part of y1. label sets the label name
plt.plot(sin2,y1(sin2),'g') # plots the decreasing part of y1. r represents red, while g represents green
plt.plot(cos1,y2(cos1),'--r',label='2cos(x)') # plots the increasing part of y2. Given different label.
plt.plot(cos2,y2(cos2),'--g') # plots the decreasing part of y2. -- represents a dashed line

#use loop to plot on next 2 intervals
for i in range(2):
    plt.plot(sin1+2*(i+1)*np.pi,y1(sin1+2*np.pi),'r')
    plt.plot(sin2+2*(i+1)*np.pi,y1(sin2+2*np.pi),'g')
    plt.plot(cos1+2*(i+1)*np.pi,y2(cos1+2*np.pi),'--r')
    plt.plot(cos2+2*(i+1)*np.pi,y2(cos2+2*np.pi),'--g')


plt.legend() # this method creates a legend
plt.ylim(-4,4) # this method sets the limits on the y-axis. they are from -4 to 4
plt.xlabel('X', fontsize = 15) # this and the below method create the xlabel
plt.ylabel('Y', fontsize = 15)
plt.grid(color='b',alpha=0.2)
plt.show()

"""###Q2###

#Explain the meaning of the code.

This about X = np.random.rand(1000) * 100. x is the variable set to the special expression. np is an alias of numPy. random is an utility from numPy. rand is a function in the np.random submodule. np.random.rand creates x number of values based on what is entered inside the parentheses. If a number is multiplied, then x number of values will be generated from 0 to the multiplied number from uniform distribution. X is an arry of 1000 random samples from a unifom distribution over 0 to 100.

This is about Y = np.random.normal(50, 10, 1000). normal() is another function from np.random. This method draws random samples from a normal distribution. It takes in 3 thingss: mean (50), standard deviation (10), and the array size(1000) from those samples. Y is an array of 1000 random samples drawn from a normal distribution with a mean of 50, and a standard deviation of 10.
"""

#Calculate the mean and standard deviation of *X* and *Y*.

X = np.random.rand(1000) * 100
Y = np.random.normal(50, 10, 1000)
print("X-MEAN: ", X.mean())
print("Y-MEAN: ", Y.mean())
print("X-STD: ", X.std())
print("Y-STD: ", Y.std())

# Plot the histograms of *X* and *Y*.

X = np.random.rand(1000) * 100
Y = np.random.normal(50, 10, 1000)

plt.hist(X,20,color='b')
plt.hist(Y,20,color='y',alpha=0.9)

plt.show()

"""#Describe the shape of each histogram.

The X histogram is generally uniform, though it does have a few points where gets more higher.
The Y histogram is bell-shaped.
"""