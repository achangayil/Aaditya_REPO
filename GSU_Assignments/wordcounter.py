# -*- coding: utf-8 -*-
"""Wordcounter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ak1tApJF0NZN5-ph5Nrpfdl9uo_CB1gW
"""

class wordCount:
    
  # this is the init constructor for the word count class
  def __init__(self, lines): 
    #assigning the variable lines to self.lines()
    self.lines = lines

  def clean(self): 
    # I have created an empty string to add 
    clean_string = "" 
    # list of punctuation in string form to be removed
    rem_punct = ["!",".",",","'","?","@","#","$","%","&","(",")","*","/","\n","]","["]
    # for each character in self.lines
    for ch in self.lines: 
    # if character is not part of the rem_punct list,
      if ch not in rem_punct:
        # add them to clean string
        clean_string += ch

    # after the for loop, return the the clean_string 
    return clean_string 

  def isNumber(self):        
    for ch in self.lines: # for each character in self.lines,
      if not ch.isdigit(): # if the character is not a digit,
        return False      # then return False. If it is a digit, 
      return True         # return True

  def countword(self):
    
    # docs represents what the clean method returns (clean_string)
    docs = self.clean()
    # wd stores the boolean value of isNumber()
    wd = self.isNumber() 
    
# every character in docs, which was the output of clean(), 
# is converted to lower case, and all words are split by space
    words = docs.lower().split(" ")
    
# this is an empty dictionary representing the words and their word counts
    pearb = {}  
# for each word in in the splitted, lowercased clean() words, 
    for word in words:
      # if isNumber() returns True, then pass  
      if wd == True:
        pass
      else:
# if aword is already in pearb, like it was already counted, 
# increase the count by 1. Otherwise, if a word is not in pearb,
# set the verb count equal to 1.
        if word in pearb:
          pearb[word] += 1
        else:
          pearb[word] = 1

    print(pearb)

def main():
  # lines is a body of string text
  lines = "While! Numpy! knows about arrays? of arbitrary objects, it's optimized for homogeneous arrays of numbers with fixed dimensions. If you really need arrays of arrays, better use a nested list. But depending on the intended use of your data, different data structures might be even better, e.g. a masked array if you have some invalid data points."
  # create letter object for the wordCount class. lines is passed as input. 
  letter = wordCount(lines) 
  # calling the countword method using the letter object
  letter.countword()

# __name__ is a special variable that defines the name of the class from where it's called.
# __main__ represents __name__. __name__ will look for the main code to execute. 
if __name__ == "__main__":
  main() # if __name__ == "__main__", the main method will ony directly execute.